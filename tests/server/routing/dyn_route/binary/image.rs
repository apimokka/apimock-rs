use hyper::StatusCode;

use crate::util::{
    http::{http_response_default, response_body_bytes},
    test_setup::TestSetup,
};

#[tokio::test]
async fn dyn_data_dir_image_png() {
    let port = TestSetup::default().launch().await;

    let response = http_response_default("/binary/image/image.png", port).await;

    assert_eq!(response.status(), StatusCode::OK);

    assert_eq!(response.headers().get("content-type").unwrap(), "image/png");

    let body_str = response_body_bytes(response).await;
    assert_eq!(
        body_str.as_ref(),
        b"\x89PNG\r\n\x1a\n\0\0\0\rIHDR\0\0\0 \0\0\0 \x01\x03\0\0\0I\xb4\xe8\xb7\0\0\0\x03PLTE\xea\xf22\xedR\xba\x13\0\0\0\x0cIDAT\x08\xd7c`\x18\xdc\0\0\0\xa0\0\x01a%}G\0\0\0\0IEND\xaeB`\x82"
    );
}

#[tokio::test]
async fn dyn_data_dir_image_jpeg() {
    let port = TestSetup::default().launch().await;

    let response = http_response_default("/binary/image/image.jpg", port).await;

    assert_eq!(response.status(), StatusCode::OK);

    assert_eq!(
        response.headers().get("content-type").unwrap(),
        "image/jpeg"
    );

    let body_str = response_body_bytes(response).await;
    assert_eq!(
        body_str.as_ref(),
        b"\xff\xd8\xff\xe0\0\x10JFIF\0\x01\x01\x01\0H\0H\0\0\xff\xdb\0C\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xdb\0C\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xc2\0\x11\x08\0 \0 \x03\x01\x11\0\x02\x11\x01\x03\x11\x01\xff\xc4\0\x15\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\xff\xc4\0\x16\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\t\xff\xda\0\x0c\x03\x01\0\x02\x10\x03\x10\0\0\x01\xad\x19\x07`\0\0\0\0\0\x0f\xff\xc4\0\x14\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x01\0\x01\x05\x02\x07\xff\xc4\0\x14\x11\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x03\x01\x01?\x01\x07\xff\xc4\0\x14\x11\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x02\x01\x01?\x01\x07\xff\xc4\0\x14\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x01\0\x06?\x02\x07\xff\xc4\0\x14\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x01\0\x01?!\x07\xff\xda\0\x0c\x03\x01\0\x02\0\x03\0\0\0\x10\0\0\0\0\0\0\xff\xc4\0\x14\x11\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x03\x01\x01?\x10\x07\xff\xc4\0\x14\x11\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x02\x01\x01?\x10\x07\xff\xc4\0\x14\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0@\xff\xda\0\x08\x01\x01\0\x01?\x10\x07\xff\xd9"
    );
}

#[tokio::test]
async fn dyn_data_dir_image_gif() {
    let port = TestSetup::default().launch().await;

    let response = http_response_default("/binary/image/image.gif", port).await;

    assert_eq!(response.status(), StatusCode::OK);

    assert_eq!(response.headers().get("content-type").unwrap(), "image/gif");

    let body_str = response_body_bytes(response).await;
    assert_eq!(
        body_str.as_ref(),
        b"GIF87a \0 \0\x80\x01\0\xea\xf22\xff\xff\xff,\0\0\0\0 \0 \0\0\x02\x1e\x84\x8f\xa9\xcb\xed\x0f\xa3\x9c\xb4\xda\x8b\xb3\xde\xbc\xfb\x0f\x86\xe2H\x96\xe6\x89\xa6\xea\xca\xb6\xee\x0b\x9b\x05\0;"
    );
}
